@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using System.Diagnostics.CodeAnalysis

@inject IJSRuntime JS
@inject ReviewService reviewService
@inject BlobServiceClient blobService
@inject IConfiguration configuration

<div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-hidden="true" aria-modal="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitleLabel">What did you think about @Product?.Name?</h4>
                <button type="button" class="close" data-dismiss="modal" aria-lable="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" rows="10"
                          placeholder="Leave us a review, we'll ❤️ it and we'll ❤️ you!"
                          @bind="reviewText" />
                  @if (showUpload)
                  {
                    <InputFile id="hi" OnChange="@LoadFiles" />
                  }
                  @if (uploadSuccessful)
                  {
                    <p class="bg-success">Uploaded</p>
                  }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="@SaveReview">Save</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Product Product { get; set; } = new();

    string reviewText = string.Empty;
    string newBlobName = string.Empty;

    string loggedInUser = "nate";

    bool loadedPhoto = false;
    bool showUpload = true;
    bool uploadSuccessful = false;

    async Task SaveReview()
    {
        await reviewService.AddReview(reviewText, Product.Id);

        // we'll just assume everything worked out great and close the modal

        reviewText = string.Empty;

        await JS.InvokeVoidAsync("hideModal", "reviewModal");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        uploadSuccessful = false;

        var containerClient = blobService.GetBlobContainerClient(loggedInUser);

        await containerClient.CreateIfNotExistsAsync(PublicAccessType.Blob);

        newBlobName = $"{Guid.NewGuid().ToString()}.jpg";

        try
        {
            await containerClient.UploadBlobAsync(newBlobName, e.File.OpenReadStream());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        loadedPhoto = true;
        uploadSuccessful = true;

        StateHasChanged();
    }
}
